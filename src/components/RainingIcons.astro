---
import HTMLiconn from './icons/HTMLiconn.astro'
import CSSicon from './icons/CSSicon.astro'
import JSicon from './icons/JSicon.astro'
import PHPicon from './icons/PHPicon.astro'
import TailwindIcon from './icons/TailwindIcon.astro'
import MysqlIcon from './icons/MysqlIcon.astro'
import CodeigniterIcon from './icons/CodeigniterIcon.astro'
import WordpressIcon from './icons/WordpressIcon.astro'
import AndroidIcon from './icons/AndroidIcon.astro'
import ReactIcon from './icons/ReactIcon.astro'

const icons = [
  { id: 'html-icon', component: HTMLiconn, className: 'text-red-500' },
  { id: 'css-icon', component: CSSicon, className: 'text-blue-500' },
  { id: 'js-icon', component: JSicon, className: 'text-yellow-500' }
]
---

<div class='overflow-y-hidden h-screen'>
  <div id='icon-container'></div>

  <!-- Pre-render SVG icons hidden in the DOM -->
  <div id='icons-template' class='hidden'>
    {
      icons.map((icon) => (
        <div id={icon.id} class={icon.className}>
          <icon.component width='50px' height='50px' />
        </div>
      ))
    }
  </div>

  <script type='module'>
    document.addEventListener('DOMContentLoaded', () => {
      const icons = [
        { id: 'html-icon', className: 'text-red-500' },
        { id: 'css-icon', className: 'text-blue-500' },
        { id: 'js-icon', className: 'text-yellow-500' }
        // Add other icons similarly
      ]

      function createIcon() {
        const randomIndex = Math.floor(Math.random() * icons.length)
        const iconData = icons[randomIndex]

        const templateIcon = document.getElementById(iconData.id)
        if (!templateIcon) return

        const iconWrapper = templateIcon.cloneNode(true)
        iconWrapper.style.position = 'absolute'
        iconWrapper.style.left = `${Math.random() * 100}vw`
        iconWrapper.style.top = '-50px'
        iconWrapper.style.animation = `fall linear infinite ${Math.random() * 2 + 2}s`

        const container = document.getElementById('icon-container')
        if (container) {
          container.appendChild(iconWrapper)
        }

        iconWrapper.addEventListener('animationend', () => {
          iconWrapper.remove()
        })
      }

      setInterval(createIcon, 2000)
    })

    // Add CSS keyframes for the fall animation
    const style = document.createElement('style')
    style.textContent = `
    @keyframes fall {
      to {
        transform: translateY(100vh);
      }
    }
  `
    document.head.appendChild(style)
  </script>
</div>
